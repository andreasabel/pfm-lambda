{-# OPTIONS --without-K --safe #-}

open import Agda.Builtin.Sigma using (Œ£; snd) renaming (_,_ to infix 20 _,_)
open import Data.Product using (_√ó_)
open import Data.Nat using (‚Ñï; zero; suc)

open import Context

module _
  -- Modal accessibility relation on contexts
  -- (\lhd -> ‚óÅ)
  (_‚óÅ_ : Ctx -> Ctx -> Set)
  (‚óÅ1 : {Œì : Ctx} -> Œì ‚óÅ (Œì ,üîì))
  (let module Rpl = Replacement _‚óÅ_)
  (let Rpl = Rpl.Rpl)
  -- Trim OPE:s and substitutions/environments
  (rewind-‚äÜ : {Œì Œì' Œî : Ctx}
    -> (m : Œì' ‚óÅ Œì) -> (w : Œì ‚äÜ Œî)
    -> Œ£ Ctx Œª Œî' -> Œî' ‚óÅ Œî √ó Œì' ‚äÜ Œî')
  (rewindRpl : {F : Ty -> Ctx -> Set} {Œì Œì' Œî : Ctx}
    -> (m : Œì' ‚óÅ Œì) -> (x : Rpl F Œì Œî)
    -> Œ£ Ctx Œª Œî' -> Œî' ‚óÅ Œî √ó Rpl F Œì' Œî')
  where

open Rpl using (¬∑; _,_; lock)

-- Intrinsically typed terms of type A in context Œì
data _‚ä¢_ : Ctx -> Ty -> Set where
  var : {A : Ty} {Œì : Ctx}
    -> A ‚àà Œì
    -> Œì ‚ä¢ A
  abs : {A B : Ty} {Œì : Ctx}
    -> Œì , A ‚ä¢ B
    -> Œì ‚ä¢ A ‚ü∂ B
  app : {A B : Ty} {Œì : Ctx}
    -> Œì ‚ä¢ A ‚ü∂ B -> Œì ‚ä¢ A
    -> Œì ‚ä¢ B
  box : {A : Ty} {Œì : Ctx}
    -> (Œì ,üîì) ‚ä¢ A
    -> Œì ‚ä¢ (‚ñ° A)
  unbox : {A : Ty} {Œì Œî : Ctx}
    -> Œî ‚ä¢ (‚ñ° A)
    -> Œî ‚óÅ Œì
    -> Œì ‚ä¢ A

infix 10 _‚ä¢_

-- Variable weakening
wk : ‚àÄ {Œì Œî A} -> Œì ‚äÜ Œî -> Œì ‚ä¢ A -> Œî ‚ä¢ A
wk w (var x) = var (wkVar w x)
wk w (abs t) = abs (wk (lift w) t)
wk w (app t s) = app (wk w t) (wk w s)
wk w (box t) = box (wk (liftüîì w) t)
wk w (unbox t m) = let _ , (m' , w') = rewind-‚äÜ m w
  in unbox (wk w' t) m'

-- Substitution from variables in context Œì to terms in context Œî
Sub = Rpl (Œª A Œî -> Œî ‚ä¢ A)
module Sub = Rpl.Properties
  (Œª A Œî -> Œî ‚ä¢ A)
  ‚óÅ1 rewind-‚äÜ
  wk (var zero)

subst : {Œì Œî : Ctx} {A : Ty} -> Sub Œì Œî -> Œì ‚ä¢ A -> Œî ‚ä¢ A
subst œÉ (abs x) = abs (subst (Sub.liftRpl œÉ) x)
subst œÉ (app x y) = app (subst œÉ x) (subst œÉ y)
subst œÉ (box x) = box (subst (lock œÉ ‚óÅ1) x)
subst œÉ (unbox x m) = let _ , (m' , œÉ') = rewindRpl m œÉ
  in unbox (subst œÉ' x) m'
subst (œÉ , x) (var zero) = x
subst (œÉ , _) (var (suc g)) = subst œÉ (var g)

-- Applies unit substitution.
_[_] : {Œì : Ctx} {A B : Ty} -> Œì , B ‚ä¢ A -> Œì ‚ä¢ B -> Œì ‚ä¢ A
_[_] x y = subst (Sub.id , y) x

-- Equivalence of terms-in-contexts
data _~_ : {Œì : Ctx} {A : Ty} -> (t s : Œì ‚ä¢ A) -> Set where
  Œ≤ : ‚àÄ {Œì A B} -> (x : Œì , A ‚ä¢ B) -> (y : Œì ‚ä¢ A)
    -> app (abs x) y ~ (x [ y ])
  Œ∑ : ‚àÄ {Œì A B} {x : Œì ‚ä¢ A ‚ü∂ B}
    -> x ~ abs (app (wk (weak ‚äÜ.id) x) (var zero))

  ‚ñ°-Œ≤ : ‚àÄ {Œì Œì' A} {x : Œì ,üîì ‚ä¢ A} {m : Œì ‚óÅ Œì'}
    -> unbox (box x) m ~ subst (lock Sub.id m) x
  ‚ñ°-Œ∑ : ‚àÄ {Œì A} -> {x : Œì ‚ä¢ ‚ñ° A}
    -> x ~ box (unbox x ‚óÅ1)

  ~-refl : ‚àÄ {Œì A} {x : Œì ‚ä¢ A}
    -> x ~ x
  ~-sym : ‚àÄ {Œì A} {x y : Œì ‚ä¢ A}
    -> x ~ y -> y ~ x
  ~-trans : ‚àÄ {Œì A} {x y z : Œì ‚ä¢ A}
    -> x ~ y -> y ~ z -> x ~ z

  -- Congruence rules
  cong-abs : ‚àÄ {Œì A B} {x y : Œì , A ‚ä¢ B}
    -> x ~ y -> abs x ~ abs y
  cong-app : ‚àÄ {Œì A B} {x x' : Œì ‚ä¢ A ‚ü∂ B} {y y' : Œì ‚ä¢ A}
    -> x ~ x' -> y ~ y' -> app x y ~ app x' y'
  cong-box : ‚àÄ {Œì A} {x y : Œì ,üîì ‚ä¢ A}
    -> x ~ y -> box x ~ box y
  cong-unbox : ‚àÄ {Œì Œî A} {x y : Œî ‚ä¢ ‚ñ° A} {m : Œî ‚óÅ Œì}
    -> x ~ y -> unbox x m ~ unbox y m

mutual
  -- Normal forms
  data _‚ä¢nf_ (Œì : Ctx) : Ty -> Set where
    nt : {A : Ty} -> Œì ‚ä¢nt A -> Œì ‚ä¢nf A
    abs : {A B : Ty} -> Œì , A ‚ä¢nf B -> Œì ‚ä¢nf A ‚ü∂ B
    box : {A : Ty} -> Œì ,üîì ‚ä¢nf A -> Œì ‚ä¢nf ‚ñ° A
  -- Neutral terms
  data _‚ä¢nt_ (Œì : Ctx) : Ty -> Set where
    var : {A : Ty} -> A ‚àà Œì -> Œì ‚ä¢nt A
    app : {A B : Ty} -> Œì ‚ä¢nt A ‚ü∂ B -> Œì ‚ä¢nf A -> Œì ‚ä¢nt B
    unbox : {A : Ty} {Œì' : Ctx} -> Œì' ‚ä¢nt ‚ñ° A -> Œì' ‚óÅ Œì -> Œì ‚ä¢nt A

infix 10 _‚ä¢nf_ _‚ä¢nt_

wk-nf : {Œì Œî : Ctx} {A : Ty} -> Œì ‚äÜ Œî -> Œì ‚ä¢nf A -> Œî ‚ä¢nf A
wk-nt : {Œì Œî : Ctx} {A : Ty} -> Œì ‚äÜ Œî -> Œì ‚ä¢nt A -> Œî ‚ä¢nt A
wk-nf w (nt x) = nt (wk-nt w x)
wk-nf w (abs x) = abs (wk-nf (lift w) x)
wk-nf w (box x) = box (wk-nf (liftüîì w) x)
wk-nt w (var x) = var (wkVar w x)
wk-nt w (app x y) = app (wk-nt w x) (wk-nf w y)
wk-nt w (unbox x m) = let _ , (m' , w') = rewind-‚äÜ m w
  in unbox (wk-nt w' x) m'

-- Quotation of normal forms/neutrals back into terms
‚åú_‚åùnf : {Œì : Ctx} {A : Ty} -> Œì ‚ä¢nf A -> Œì ‚ä¢ A
‚åú_‚åùnt : {Œì : Ctx} {A : Ty} -> Œì ‚ä¢nt A -> Œì ‚ä¢ A
‚åú nt x ‚åùnf = ‚åú x ‚åùnt
‚åú abs x ‚åùnf = abs ‚åú x ‚åùnf
‚åú box x ‚åùnf = box ‚åú x ‚åùnf
‚åú var x ‚åùnt = var x
‚åú app x y ‚åùnt = app ‚åú x ‚åùnt ‚åú y ‚åùnf
‚åú unbox x m ‚åùnt = unbox ‚åú x ‚åùnt m

record Box' (A' : Ctx -> Set) (Œì : Ctx) : Set where
  constructor box'
  field
    unbox' : {Œì' Œî : Ctx} ->  Œì ‚äÜ Œì' -> Œì' ‚óÅ Œî -> A' Œî

-- Interpret a type to a presheaf
‚ü¶_‚üßty : Ty -> Ctx -> Set
‚ü¶ Œπ ‚üßty Œì = Œì ‚ä¢nf Œπ
‚ü¶ A ‚ü∂ B ‚üßty Œì = {Œî : Ctx} -> Œì ‚äÜ Œî -> ‚ü¶ A ‚üßty Œî -> ‚ü¶ B ‚üßty Œî
‚ü¶ ‚ñ° A ‚üßty Œì = Box' ‚ü¶ A ‚üßty Œì

wkTy' : {A : Ty} {Œì Œî : Ctx} -> Œì ‚äÜ Œî -> ‚ü¶ A ‚üßty Œì -> ‚ü¶ A ‚üßty Œî
wkTy' {Œπ} w A' = wk-nf w A'
wkTy' {A ‚ü∂ B} w A‚ü∂B' w2 A' = A‚ü∂B' (w ‚óè w2) A'
wkTy' {‚ñ° A} w (box' f) = box' Œª w2 -> f (w ‚óè w2)

reify : {A : Ty} {Œì : Ctx} -> ‚ü¶ A ‚üßty Œì -> Œì ‚ä¢nf A
reflect : {A : Ty} {Œì : Ctx} -> Œì ‚ä¢nt A -> ‚ü¶ A ‚üßty Œì
reify {Œπ} A' = A'
reify {A ‚ü∂ B} A‚ü∂B' = abs (reify (A‚ü∂B' (weak ‚äÜ.id) (reflect (var zero))))
reify {‚ñ° A} (box' f) = let A' = f ‚äÜ.id ‚óÅ1 in box (reify A')
reflect {Œπ} x = nt x
reflect {A ‚ü∂ B} x w A' = reflect (app (wk-nt w x) (reify A'))
reflect {‚ñ° A} x = box' Œª w m -> reflect (unbox (wk-nt w x) m)

-- Interpret context to a presheaf
Env = Rpl ‚ü¶_‚üßty
‚ü¶_‚üßctx = Env
module Env = Rpl.Properties
  ‚ü¶_‚üßty
  ‚óÅ1 rewind-‚äÜ
  wkTy' (reflect (var zero))

-- Interpret terms-in-contexts as natural transformations
‚ü¶_‚üßtm : {Œì : Ctx} {A : Ty} -> Œì ‚ä¢ A -> {Œî : Ctx} -> ‚ü¶ Œì ‚üßctx Œî -> ‚ü¶ A ‚üßty Œî
‚ü¶ var A‚ààŒì ‚üßtm Œì' = lookup A‚ààŒì Œì'
  where
    lookup : ‚àÄ {A Œì Œî} -> A ‚àà Œì -> ‚ü¶ Œì ‚üßctx Œî -> ‚ü¶ A ‚üßty Œî
    lookup zero (_ , A') = A'
    lookup (suc x) (Œì' , _) = lookup x Œì'
‚ü¶ abs x ‚üßtm Œì' e y' = ‚ü¶ x ‚üßtm (Env.wk e Œì' , y')
‚ü¶ app x y ‚üßtm Œì' = ‚ü¶ x ‚üßtm Œì' ‚äÜ.id (‚ü¶ y ‚üßtm Œì')
‚ü¶ box x ‚üßtm Œì' = box' Œª w m -> ‚ü¶ x ‚üßtm (lock (Env.wk w Œì') m)
‚ü¶_‚üßtm (unbox x m) Œì' = let
  _ , (m' , Œî') = rewindRpl m Œì'
  box' f = ‚ü¶ x ‚üßtm Œî'
  in f ‚äÜ.id m'

-- Normalization function
nf : {Œì : Ctx} {A : Ty} -> Œì ‚ä¢ A -> Œì ‚ä¢nf A
-- Evaluate in fresh environment consisting of all neutrals
nf t = reify (‚ü¶ t ‚üßtm Env.id)
