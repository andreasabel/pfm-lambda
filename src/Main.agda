open import Data.Nat using (â„•; zero; suc)

data Ty : Set where
  Î¹ : Ty
  _âŸ¶_ : Ty -> Ty -> Ty
  â–¡_ : Ty -> Ty

infixr 30 _âŸ¶_

data Tm : Set where
  var : (n : â„•) -> Tm 
  abs : Tm -> Tm
  app : Tm -> Tm -> Tm
  box : Tm -> Tm
  unbox : Tm -> Tm

-- Typing context
data Ctx : Set where
  Â· : Ctx
  _,_ : (Î“ : Ctx) -> (A : Ty) -> Ctx
  _,ğŸ”“ : (Î“ : Ctx) -> Ctx

infixl 40 _,_

-- A term of type A can be found in the context at index n.
data Get (A : Ty) : Ctx -> â„• -> Set where
  i0 : {Î“ : Ctx} -> Get A (Î“ , A) 0
  is : {Î“ : Ctx} {n : â„•} -> {B : Ty} -> Get A Î“ n -> Get A (Î“ , B) (suc n)

-- Relation between contexts Î“ and Î“' signifying that it is possible
-- to extend Î“ to Î“' without adding any locks.
data LFExt (Î“ : Ctx) : Ctx -> Set where
  zero : LFExt Î“ Î“
  suc : {Î“' : Ctx} -> LFExt Î“ Î“' -> (A : Ty) -> LFExt Î“ (Î“' , A)

-- Typing judgement: Term t is of type A in context Î“.
data _âŠ¢_::_ : Ctx -> Tm -> Ty -> Set where
  âŠ¢-var : {n : â„•} {A : Ty} {Î“ : Ctx}
    -> Get A Î“ n
    -> Î“ âŠ¢ var n :: A

  âŠ¢-abs : {A B : Ty} {Î“ : Ctx} {t : Tm}
    -> Î“ , A âŠ¢ t :: B
    -> Î“ âŠ¢ abs t :: A âŸ¶ B

  âŠ¢-app : {A B : Ty} {Î“ : Ctx} {t u : Tm}
    -> Î“ âŠ¢ t :: A âŸ¶ B -> Î“ âŠ¢ u :: A
    -> Î“ âŠ¢ app t u :: B

  âŠ¢-box : {A : Ty} {Î“ : Ctx} {t : Tm}
    -> (Î“ ,ğŸ”“) âŠ¢ t :: A
    -> Î“ âŠ¢ box t :: (â–¡ A)

  âŠ¢-unbox : {A : Ty} {Î“ Î“' : Ctx} {t : Tm}
    -> Î“ âŠ¢ t :: (â–¡ A)
    -> LFExt (Î“ ,ğŸ”“) Î“'
    -> Î“' âŠ¢ unbox t :: A

-- Equivalence of terms-in-context (including Î²-red/Î·-conv)
data _â‰…_
  : {Î“ Î“' : Ctx} {t s : Tm} {A B : Ty}
  -> Î“ âŠ¢ t :: A -> Î“' âŠ¢ s :: B -> Set where
